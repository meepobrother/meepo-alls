{
  "version": 3,
  "file": "meepo-order-pipe.umd.js",
  "sources": [
    "ng://meepo-order-pipe/out/public_api.ts",
    "ng://meepo-order-pipe/out/order.pipe.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { OrderPipe } from './order.pipe';\n\n@NgModule({\n    declarations: [OrderPipe],\n    exports: [OrderPipe],\n    providers: [OrderPipe]\n})\nexport class OrderModule { }",
    "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'orderBy',\n    pure: false\n})\nexport class OrderPipe implements PipeTransform {\n\n    /**\n     * Check if a value is a string\n     *\n     * @param value\n     */\n    static isString(value: any) {\n        return typeof value === 'string' || value instanceof String;\n    }\n\n    /**\n     * Sorts values ignoring the case\n     *\n     * @param a\n     * @param b\n     */\n    static caseInsensitiveSort(a: any, b: any) {\n        if (OrderPipe.isString(a) && OrderPipe.isString(b)) {\n            return a.localeCompare(b);\n        }\n        return OrderPipe.defaultCompare(a, b);\n    }\n\n    /**\n     * Default compare method\n     * \n     * @param a \n     * @param b \n     */\n    static defaultCompare(a: any, b: any) {\n        if (a === b) {\n            return 0;\n        }\n        if (a == null) {\n            return 1;\n        }\n        if (b == null) {\n            return -1;\n        }\n        return a > b ? 1 : -1;\n    }\n\n    \n    static parseExpression(expression: string): string[] {\n        expression = expression.replace(/\\[(\\w+)\\]/g, '.$1');\n        expression = expression.replace(/^\\./, '');\n        return expression.split('.');\n    }\n\n    static getValue(object: any, expression: string[]) {\n        for (let i = 0, n = expression.length; i < n; ++i) {\n            const k = expression[i];\n            if (!(k in object)) {\n                return;\n            }\n            object = object[k];\n        }\n\n        return object;\n    }\n\n    static setValue(object: any, value: any, expression: string[]) {\n        let i;\n        for (i = 0; i < expression.length - 1; i++) {\n            object = object[expression[i]];\n        }\n\n        object[expression[i]] = value;\n    }\n\n    transform(value: any | any[], expression?: any, reverse?: boolean, isCaseInsensitive: boolean = false, comparator?: Function): any {\n        if (!value) {\n            return value;\n        }\n\n        if (Array.isArray(value)) {\n            return this.sortArray(value, expression, reverse, isCaseInsensitive, comparator);\n        }\n\n        if (typeof value === 'object') {\n            return this.transformObject(value, expression, reverse, isCaseInsensitive, comparator);\n        }\n\n        return value;\n    }\n\n    private sortArray(value: any[], expression?: any, reverse?: boolean, isCaseInsensitive?: boolean, comparator?: Function): any[] {\n        const isDeepLink = expression && expression.indexOf('.') !== -1;\n\n        if (isDeepLink) {\n            expression = OrderPipe.parseExpression(expression);\n        }\n\n        let compareFn: Function;\n\n        if (comparator && typeof comparator === 'function') {\n            compareFn = comparator;\n        } else {\n            compareFn = isCaseInsensitive ? OrderPipe.caseInsensitiveSort : OrderPipe.defaultCompare;\n        }\n\n        let array: any[] = value.sort((a: any, b: any): number => {\n            if (!expression) {\n                return compareFn(a, b);\n            }\n\n            if (!isDeepLink) {\n                if (a && b) {\n                    return compareFn(a[expression], b[expression]);\n                }\n                return compareFn(a, b);\n            }\n\n            return compareFn(OrderPipe.getValue(a, expression), OrderPipe.getValue(b, expression));\n        });\n\n        if (reverse) {\n            return array.reverse();\n        }\n\n        return array;\n    }\n\n    private transformObject(value: any | any[], expression?: any, reverse?: boolean, isCaseInsensitive?: boolean, comparator?: Function): any {\n\n        let parsedExpression = OrderPipe.parseExpression(expression);\n        let lastPredicate = parsedExpression.pop();\n        let oldValue = OrderPipe.getValue(value, parsedExpression);\n\n        if (!Array.isArray(oldValue)) {\n            parsedExpression.push(lastPredicate);\n            lastPredicate = null;\n            oldValue = OrderPipe.getValue(value, parsedExpression);\n        }\n\n        if (!oldValue) {\n            return value;\n        }\n\n        OrderPipe.setValue(value, this.transform(oldValue, lastPredicate, reverse, isCaseInsensitive), parsedExpression);\n        return value;\n    }\n}"
  ],
  "names": [
    "Pipe"
  ],
  "mappings": "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"
}
