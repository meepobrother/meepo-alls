{
  "version": 3,
  "file": "meepo-order-pipe.umd.min.js",
  "sources": [
    "ng://meepo-order-pipe/out/order.pipe.ts",
    "ng://meepo-order-pipe/out/public_api.ts"
  ],
  "sourcesContent": [
    "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'orderBy',\n    pure: false\n})\nexport class OrderPipe implements PipeTransform {\n\n    /**\n     * Check if a value is a string\n     *\n     * @param value\n     */\n    static isString(value: any) {\n        return typeof value === 'string' || value instanceof String;\n    }\n\n    /**\n     * Sorts values ignoring the case\n     *\n     * @param a\n     * @param b\n     */\n    static caseInsensitiveSort(a: any, b: any) {\n        if (OrderPipe.isString(a) && OrderPipe.isString(b)) {\n            return a.localeCompare(b);\n        }\n        return OrderPipe.defaultCompare(a, b);\n    }\n\n    /**\n     * Default compare method\n     * \n     * @param a \n     * @param b \n     */\n    static defaultCompare(a: any, b: any) {\n        if (a === b) {\n            return 0;\n        }\n        if (a == null) {\n            return 1;\n        }\n        if (b == null) {\n            return -1;\n        }\n        return a > b ? 1 : -1;\n    }\n\n    \n    static parseExpression(expression: string): string[] {\n        expression = expression.replace(/\\[(\\w+)\\]/g, '.$1');\n        expression = expression.replace(/^\\./, '');\n        return expression.split('.');\n    }\n\n    static getValue(object: any, expression: string[]) {\n        for (let i = 0, n = expression.length; i < n; ++i) {\n            const k = expression[i];\n            if (!(k in object)) {\n                return;\n            }\n            object = object[k];\n        }\n\n        return object;\n    }\n\n    static setValue(object: any, value: any, expression: string[]) {\n        let i;\n        for (i = 0; i < expression.length - 1; i++) {\n            object = object[expression[i]];\n        }\n\n        object[expression[i]] = value;\n    }\n\n    transform(value: any | any[], expression?: any, reverse?: boolean, isCaseInsensitive: boolean = false, comparator?: Function): any {\n        if (!value) {\n            return value;\n        }\n\n        if (Array.isArray(value)) {\n            return this.sortArray(value, expression, reverse, isCaseInsensitive, comparator);\n        }\n\n        if (typeof value === 'object') {\n            return this.transformObject(value, expression, reverse, isCaseInsensitive, comparator);\n        }\n\n        return value;\n    }\n\n    private sortArray(value: any[], expression?: any, reverse?: boolean, isCaseInsensitive?: boolean, comparator?: Function): any[] {\n        const isDeepLink = expression && expression.indexOf('.') !== -1;\n\n        if (isDeepLink) {\n            expression = OrderPipe.parseExpression(expression);\n        }\n\n        let compareFn: Function;\n\n        if (comparator && typeof comparator === 'function') {\n            compareFn = comparator;\n        } else {\n            compareFn = isCaseInsensitive ? OrderPipe.caseInsensitiveSort : OrderPipe.defaultCompare;\n        }\n\n        let array: any[] = value.sort((a: any, b: any): number => {\n            if (!expression) {\n                return compareFn(a, b);\n            }\n\n            if (!isDeepLink) {\n                if (a && b) {\n                    return compareFn(a[expression], b[expression]);\n                }\n                return compareFn(a, b);\n            }\n\n            return compareFn(OrderPipe.getValue(a, expression), OrderPipe.getValue(b, expression));\n        });\n\n        if (reverse) {\n            return array.reverse();\n        }\n\n        return array;\n    }\n\n    private transformObject(value: any | any[], expression?: any, reverse?: boolean, isCaseInsensitive?: boolean, comparator?: Function): any {\n\n        let parsedExpression = OrderPipe.parseExpression(expression);\n        let lastPredicate = parsedExpression.pop();\n        let oldValue = OrderPipe.getValue(value, parsedExpression);\n\n        if (!Array.isArray(oldValue)) {\n            parsedExpression.push(lastPredicate);\n            lastPredicate = null;\n            oldValue = OrderPipe.getValue(value, parsedExpression);\n        }\n\n        if (!oldValue) {\n            return value;\n        }\n\n        OrderPipe.setValue(value, this.transform(oldValue, lastPredicate, reverse, isCaseInsensitive), parsedExpression);\n        return value;\n    }\n}",
    "import { NgModule } from '@angular/core';\nimport { OrderPipe } from './order.pipe';\n\n@NgModule({\n    declarations: [OrderPipe],\n    exports: [OrderPipe],\n    providers: [OrderPipe]\n})\nexport class OrderModule { }"
  ],
  "names": [
    "OrderPipe",
    "isString",
    "value",
    "String",
    "caseInsensitiveSort",
    "a",
    "b",
    "localeCompare",
    "defaultCompare",
    "parseExpression",
    "expression",
    "replace",
    "split",
    "getValue",
    "object",
    "i",
    "n",
    "length",
    "k",
    "setValue",
    "prototype",
    "transform",
    "reverse",
    "isCaseInsensitive",
    "comparator",
    "Array",
    "isArray",
    "this",
    "sortArray",
    "transformObject",
    "compareFn",
    "isDeepLink",
    "indexOf",
    "array",
    "sort",
    "parsedExpression",
    "lastPredicate",
    "pop",
    "oldValue",
    "push",
    "decorators",
    "type",
    "Pipe",
    "args",
    "OrderModule"
  ],
  "mappings": "4QAAA,SAAAA,KAEA,OAYAA,EAAAC,SAAA,SAAAC,GACA,MAAA,iBAAAA,GAAAA,aAAAC,QASAH,EAAAI,oBAAA,SAA8CC,EAA9CC,GACA,OAAYN,EAAZC,SAAAI,IAAqCL,EAArCC,SAAAK,GACAD,EAAAE,cAAAD,GAEAN,EAAAQ,eAAAH,EAAAC,IASAN,EAAAQ,eAAA,SAAAH,EAAAC,GACA,OAAYD,IAAZC,EACA,EAEA,MAAYD,EACZ,EAEA,MAAYC,GACZ,EAEAD,EAAAC,EAAA,GAAA,GAIAN,EAAAS,gBAAgC,SAAhCC,GAGA,OADQA,GADAA,EAAaA,EAAWC,QAAQ,aAAxC,QACgCA,QAAhC,MAAA,KACAC,MAAA,MAGAZ,EAAAa,SAAA,SAAkBC,EAAlBJ,GACA,IAAA,IAAAK,EAAA,EAAAC,EAAAN,EAAAO,OAAAF,EAAAC,IAAAD,EAAA,CACY,IAAZG,EAAAR,EAAAK,GACA,KAAAG,KAAuBJ,GACvB,OAEAA,EAAAA,EAAAI,GAGA,OAAAJ,GAGAd,EAAAmB,SAAA,SAAAL,EAAAZ,EAAAQ,GACQ,IAARK,EACA,IAAAA,EAAA,EAAAA,EAAAL,EAAAO,OAAA,EAAAF,IACAD,EAAAA,EAAAJ,EAAAK,IAGAD,EAAAJ,EAAAK,IAAAb,GAGAF,EAAAoB,UAAAC,UAAA,SAAAnB,EAAAQ,EAAAY,EAAAC,EAAAC,GAEA,YADA,IAAYD,IAAZA,GAAA,GACArB,EAIAuB,MAAAC,QAAAxB,GAEmByB,KAAKC,UAAxB1B,EAAAQ,EAAAY,EAAAC,EAAAC,GAEA,iBAAAtB,EAEAyB,KAAAE,gBAAA3B,EAAAQ,EAAAY,EAAAC,EAAAC,KARAtB,GAcAF,EAAAoB,UAAwBQ,UAAxB,SAAA1B,EAAAQ,EAAAY,EAAAC,EAAAC,GACA,IAMAM,EANAC,EAAArB,IAAA,IAAAA,EAAAsB,QAAA,KACAD,IAEArB,EAAAV,EAAAS,gBAAAC,IAIAoB,EAAAN,GAAA,mBAAAA,EAAAA,EAIAD,EAAAvB,EAAAI,oBAAAJ,EAAAQ,eAEA,IAAAyB,EAAqC/B,EAArCgC,KAAA,SAAA7B,EAAAC,GACA,OAAAI,EAIAqB,EAQmBD,EAAnB9B,EAAAa,SAAAR,EAAAK,GAAAV,EAAAa,SAAAP,EAAAI,IAPAL,GAAAC,EACAwB,EAAqCzB,EAAEK,GAAvCJ,EAAAI,IAGAoB,EAAAzB,EAAAC,GAPAwB,EAAAzB,EAAAC,KAYA,OAAAgB,EAEAW,EAAAX,aAMAtB,EAAAoB,UAAAS,gBAAyB,SAAzB3B,EAAAQ,EAAAY,EAAAC,EAAAC,GACQ,IAAIW,EAAZnC,EAAyCS,gBAAzCC,GAEA0B,EAAAD,EAAAE,MAC6BC,EAA7BtC,EAAAa,SAAAX,EAAAiC,GAOA,OANAV,MAAAC,QAAAY,KACYH,EAAZI,KAAAH,GACAA,EAAA,KAEYE,EAAWtC,EAAvBa,SAAAX,EAAAiC,IAEAG,8CAEApC,GAhJAF,KAEAA,EAAAwC,aACAC,KAAAC,EAAAA,KAAAC,yFCAA,OAFA,gBAIAC,EAAAJ"
}
